#!/usr/bin/env node 

var util = require('util');
var fs = require('fs');
var compiler = require('../compiler');
var reader = require('../reader');
var js_backend = require('../backends/js');
var runtime = require('../runtime');
var src;

if(process.argv.length < 3) {
    console.log('Usage:\n');
    console.log(process.argv[0] + ' <file>');
    console.log('   -c      : compile');
    console.log('   -e <src>: evalute src');
    process.exit(1);
}

var args = process.argv.slice(2);
var compile = false;
var expand = false;
var amt = false;
var rt = 'js';
var compiler_path = false;

if(args[0] == '-c') {
    compile = true;
    args = args.slice(1);
}

if(args[0] == '-p') {
    expand = true;
    args = args.slice(1);
}

if(args[0] == '-r') {
    if(args[1].indexOf('.ol') == -1) {
        rt = args[1];
        args = args.slice(2);
    }
}

if(args[0] == '-l') {
    if(args[1].indexOf('.ol') == -1) {
        compiler_path = args[1];
        args = args.slice(2);
    }
}

if(args[0] == '-e') {
    src = args[1];
    args = args.slice(2);
}
else {
    src = fs.readFileSync(args[0], 'utf-8');
    args = args.slice(1);
}

if(expand) {
    compiler['set-macro-generator'](js_backend());

    compiler.pp(compiler.desourcify(compiler.expand(reader.read(src))));
}
else {
    var js = js_backend();

    if(compiler_path) {
        js['write-runtime'](rt, compiler_path);
    }
    else {
        js['write-runtime'](rt);
    }

    var output = compiler["compile-program"](src, js);

    if(compile) {
        output = 'var __args = process.argv.slice(2);' + output;
        console.log(output);
    }
    else {
        output = 'var __args = args;' + output;
        eval(output);
    }
}
